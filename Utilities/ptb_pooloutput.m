function dtTable = ptb_pooloutput(matFiles, poolFn, dtFieldname)
% dtTable = ptb_pooloutput(matFiles, poolFn, dtFieldname)
%
% This function pools data files for each participants together. 
%
% Inputs:
%     matFiles          <cell of string> a cell of files. If empty, a GUI
%                       will open for selecting files. Files could be *.mat
%                       or *.txt. [*.mat should be generted by PTB; *.txt
%                       (or *.xls, *.xlsx) could be generated by any code 
%                       as long as it can be read by readtable.m.
%     poolFn            <string> strings to be added at the beginning
%                       of the output filename. 
%     dtFieldname       <string> the fieldname [in params] containing the
%                       data table. Default is 'dtTable'.
%
% Output:
%     dtTable           <table> the pooled table. 
%     dtTable is also saved as a csv file.
%     
% Created by Haiyang Jin (23-Feb-2020)

% open a GUI to select files
if ~exist('matFiles', 'var') || isempty(matFiles)
    [matFns, thepath] = uigetfile({'*.mat', 'Matlab files (*.mat)'; ...
        '*.xls;*.xlsx', 'Excel files (*.xls;*.xlsx)';...
        '*.csv', 'Csv files (*.csv)';...
        '*.txt', 'Data files (*.txt)'}, ...
        'Please select all the Matlab output files...',...
        'MultiSelect', 'on');
    
    matFiles = fullfile(thepath, matFns);
elseif ischar(matFiles)
    matFiles = {matFiles};
end

if ~exist('poolFn', 'var') || isempty(poolFn)
    poolFn = 'Pooled';
end

if ~exist('dtFieldname', 'var') || isempty(dtFieldname)
    dtFieldname = 'dtTable';
end

% read the extensions of the files
[~, ~, exts] = cellfun(@fileparts, matFiles, 'uni', false);
ext = unique(exts);

% error if the file formats are differnt
if numel(ext) > 1
    error('The selected files are not in the same format!');
else
    ext = ext{1};
end

% number of files
nFile = numel(matFiles);

switch ext
    case '.mat'
        % if the data were stored in
        matArray = cellfun(@load, matFiles, 'uni', true);
        dtTable = vertcat(matArray.(dtFieldname));
        
        % set the name for the output file
        nSubj = numel(unique(dtTable.SubjCode));
        nSess = nFile / nSubj;
    case {'.txt', '.xls', '.xlsx', '.csv'}
        textArray = cellfun(@readtable, matFiles, 'uni', false);
        dtTable = vertcat(textArray{:});
        nSubj = nFile;
        nSess = 1;
end

% create the filename
dtstring = datestr(now,'yyyymmddHHMM');
poolFilename = sprintf('%s_Subj%d_Sess%d_%s.csv', poolFn, nSubj, nSess, dtstring);

% save the file as csv file
writetable(dtTable, poolFilename);

end