function im_writedir(stimDir, outPath, matrixFieldname, imgExt, imgString)
% im_writedir(stimDir, outputPath, matrixFieldname, imgExt, imgString)
%
% This function write image directory into image files with specific image
% file type.
%
% Inputs:
%     stimDir           <structure> stimulus structure [generated by
%                        im_readdir].
%     outPath           <string> the path to the output folder
%     matrixFieldname   <string> the fieldname to be saved.
%     imgExt            <string> image extensions. if isempty, images will
%                        be saved as their original formats.
%     imgString         <string> extra strings to be added at the end of
%                        the file name.
%
% Output:
%     creat images in the outputPath
%
% Created by Haiyang Jin (20-Feb-2020)
% 
% See also:
% im_dir, im_readdir

% creat the default output folder
if ~exist('outPath', 'var') || isempty(outPath)
    outPath = fullfile(pwd, 'newimages');
end
if ~exist(outPath, 'dir')
    mkdir(outPath);
end

if ~exist('matrixFieldname', 'var') || isempty(matrixFieldname)
    matrixFieldname = 'matrix';
elseif ~isfield(stimDir, matrixFieldname)
    error('%s is not a valid fieldname in stimDir.', matrixFieldname);
end

% if imgExt is empty, images will be saved in their original formats
if ~exist('imgExt', 'var') || isempty(imgExt)
    imgExt = '';
    newExt = false;
else
    newExt = true;
    
    % add point to the extention if necessary
    if ~strcmp(imgExt(1), '.')
        imgExt = ['.' imgExt];
    end
end

if ~exist('imgString', 'var') || isempty(imgString)
    
    switch matrixFieldname
        case 'matrix'
            imgString = '';
        case 'psmatrix'
            imgString = '_ps';
        case 'bsmatrix'
            imgString = '_bs';
        otherwise
            imgString = '';
    end
    
end

%%
% creat the output folder (and its subfolders)
if isfield(stimDir, 'condition')
    subFolders = unique({stimDir.condition});
    subFolders(strcmp(subFolders, 'main')) = [];
    tempFolders = fullfile(outPath, subFolders);
    isSub = true;
else
    tempFolders = {outPath};
    isSub = false;
end

% creat the folder and subfolders
cellfun(@mkdir, tempFolders);

% number of images to be written
nImg = numel(stimDir);

for iImg = 1:nImg
    
    % structure for this image
    thisImg = stimDir(iImg);
    
    % add new extension if needed
    [~, fn, ext] = fileparts(thisImg.fn);
    
    % add the image strings
    theFn = [fn imgString];
    
    % set the image extension
    if newExt
        theExt = imgExt;
    else
        theExt = ext;
    end
    
    % add subfolders to the path
    if isSub && ~strcmp(thisImg.condition, 'main')
        thePath = fullfile(outPath, thisImg.condition);
    else
        thePath = outPath;
    end
    
    % obtain the fieldname for alpha layer
    if ismember(theExt, {'.png', '.pdf'})
        alphaFieldname = [erase(matrixFieldname, 'matrix') 'alpha'];
    else
        alphaFieldname = 'nonalpha';
    end
    
    % write the image
    if isfield(thisImg, alphaFieldname)
        theAlpha = double(thisImg.(alphaFieldname));
        if any(theAlpha > 2); theAlpha = theAlpha/255; end
        alphaCell = {'alpha', theAlpha};
    else
        alphaCell={};
    end
    
    % convert 0-255 to 0-1 if needed
    outMatrix = double(thisImg.(matrixFieldname));
    if any(outMatrix > 2)
        outMatrix = outMatrix/255;
    end
   
    
    thisOut = fullfile(thePath, [theFn theExt]);
    switch theExt
        case '.pdf'
            fig = figure('Visible', 'off');
            h = imshow(outMatrix);
            if ~isempty(alphaCell); set(h, 'AlphaData', theAlpha); end
            try
                % https://github.com/altmany/export_fig
                export_fig(thisOut, '-pdf','-transparent');
            catch
                print(fig, thisOut,'-dpng');
            end
        otherwise
            imwrite(outMatrix, thisOut, alphaCell{:});
    end
    
    
end

end