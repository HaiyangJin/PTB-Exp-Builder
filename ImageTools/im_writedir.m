function im_writedir(stimDir, outPath, matrixFn, imgExt, extraStr)
% im_writedir(stimDir, outPath, matrixFn, imgExt, extraStr)
%
% This function write image directory into image files with specific image
% file type.
%
% Inputs:
%     stimDir       <struct> stimulus structure [generated by im_readdir].
%     outPath       <str> the path to the output folder
%     matrixFn      <str> the fieldname to be saved.
%     imgExt        <str> image extensions. if isempty, images will be
%                    saved as their original formats.
%     extraStr      <str> extra strings to be added at the end of the field
%                    name.
%                OR <cell> if extraStr is a fieldname of stimDir (which 
%                    has to be string), it will be used as the extra 
%                    strings to be added to the output filename.
%
% Output:
%     creat images in the outputPath
%
% Created by Haiyang Jin (20-Feb-2020)
%
% See also:
% im_dir, im_readdir

% creat the default output folder
if ~exist('outPath', 'var') || isempty(outPath)
    outPath = fullfile(pwd, 'newimages');
end
ptb_mkdir(outPath);

if ~exist('matrixFn', 'var') || isempty(matrixFn)
    matrixFn = 'matrix';
elseif ~isfield(stimDir, matrixFn)
    error('%s is not a valid fieldname in stimDir.', matrixFn);
end

% if imgExt is empty, images will be saved in their original formats
if ~exist('imgExt', 'var') || isempty(imgExt)
    imgExt = '';
    newExt = false;
else
    newExt = true;
    % add point to the extention if necessary
    if ~strcmp(imgExt(1), '.')
        imgExt = ['.' imgExt];
    end
end

if ~exist('extraStr', 'var') || isempty(extraStr)
    extraStr = 'tmp';
    switch matrixFn
        case 'matrix'
            theextraStr = '';
        case 'psmatrix'
            theextraStr = '_ps';
        case 'bsmatrix'
            theextraStr = '_bs';
        otherwise
            theextraStr = '';
    end
end

%% Write images
% creat the output folder (and its subfolders)
if isfield(stimDir, 'condition')
    subFolders = unique({stimDir.condition});
    subFolders(strcmp(subFolders, 'main')) = [];
    tempFolders = fullfile(outPath, subFolders);
    isSub = true;
else
    tempFolders = {outPath};
    isSub = false;
end

% creat the folder and subfolders
cellfun(@mkdir, tempFolders);

% number of images to be written
nImg = numel(stimDir);

for iImg = 1:nImg

    % structure for this image
    thisImg = stimDir(iImg);

    % add new extension if needed
    [~, fn, ext] = fileparts(thisImg.fn);

    % set the image extension
    theExts = {imgExt, ext};
    outExt = theExts{2-newExt};

    % add subfolders to the path
    thePaths = {fullfile(outPath, thisImg.condition), outPath};
    thePath = thePaths{2-(isSub && ~strcmp(thisImg.condition, 'main'))};

    % obtain the fieldname for alpha layer
    alphafns = {[erase(matrixFn, 'matrix') 'alpha'], 'nonalpha'};
    alphafn = alphafns{2-ismember(outExt, {'.png', '.pdf'})};

    % obtain the image alpha
    if isfield(thisImg, alphafn)
        alphaCell = {'alpha', uint8(thisImg.(alphafn))};
    else
        alphaCell={};
    end

    % convert to uint8
    outMatrix = uint8(thisImg.(matrixFn));

    % use the filed value
    if iscell(extraStr) && isfield(thisImg, extraStr{1})
        theextraStr = ['_' thisImg.(extraStr{1})];
    end

    thisOut = fullfile(thePath, [fn theextraStr outExt]);
    switch outExt
        case '.pdf'
            fig = figure('Visible', 'off');
            h = imshow(outMatrix);
            if ~isempty(alphaCell); set(h, 'AlphaData', theAlpha); end
            try
                % https://github.com/altmany/export_fig
                export_fig(thisOut, '-pdf','-transparent');
            catch
                print(fig, thisOut,'-dpdf');
            end
        otherwise
            imwrite(outMatrix, thisOut, alphaCell{:});
    end

end

end